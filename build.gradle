buildscript {
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
		classpath 'org.ow2.asm:asm:9.0'
		classpath 'org.ow2.asm:asm-tree:9.0'
		classpath 'org.ow2.asm:asm-commons:9.0'
		// just used for shrinking. i've used proguard a lot and trust it
		classpath 'com.guardsquare:proguard-gradle:7.2.2'
	}
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java-library'
apply plugin: 'maven-publish'


group = 'com.unascribed'
archivesBaseName = 'unsup'
version = '0.1.0'

sourceCompatibility = targetCompatibility = 8

repositories { 
	mavenCentral()
}

configurations {
	shade
	compile.extendsFrom shade
}

dependencies {
	shade 'com.grack:nanojson:1.6'
	shade 'net.i2p.crypto:eddsa:0.3.0'
	shade('com.squareup.okhttp3:okhttp:4.9.3') {
		exclude group: 'org.jetbrains'
		exclude module: 'kotlin-stdlib-common'
	}
}

jar {
	classifier 'slim'
}

shadowJar {
	classifier 'fat'
	["net.i2p.crypto", "kotlin", "okio", "okhttp3", "com.grack.nanojson"].each {
		relocate it, 'com.unascribed.sup.lib.'+it
	}
}

task proguard(type: proguard.gradle.ProGuardTask) {
	dependsOn shadowJar
	injars shadowJar.archivePath
	libraryjars files(
		System.properties["java.home"]+"/jmods/java.base.jmod", // everyone needs java base
		System.properties["java.home"]+"/jmods/java.desktop.jmod", // used by the puppet
		System.properties["java.home"]+"/jmods/java.management.jmod", // for the agent
	)
	outjars 'build/tmp/proguard.jar'
	
	// releasing open source programs as obfuscated jars is bad praxis
	// (yes, pg's optimization is a form of obfuscation! let the JIT handle that)
	dontoptimize
	dontobfuscate
	
	keep 'class com.unascribed.sup.Agent { *; }'
	keep 'class com.unascribed.sup.Puppet { *; }'
	keep 'class com.unascribed.sup.Unsup { *; }'
	
	keepclassmembers 'enum * { public static **[] values(); public static ** valueOf(java.lang.String); }'

	dontwarn 'com.unascribed.sup.lib.**'
	
	verbose
}

task proguardJar(type: Jar) {
	dependsOn proguard
	from(zipTree('build/tmp/proguard.jar'))
	exclude 'META-INF/**'
	exclude '**/*.kotlin_metadata'
	exclude '**/*.kotlin_builtins'
	manifest {
		attributes (
			'Main-Class': 'com.unascribed.sup.Agent',
			'Premain-Class': 'com.unascribed.sup.Agent'
		)
	}
}

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.Iterator;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AnnotationNode;
import org.objectweb.asm.tree.ClassNode;

task amendClassPrivacy {
	dependsOn proguardJar
	doFirst {
		File tmp = new File("build/tmp/amended.jar");
		ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(tmp));
		ZipFile zf = new ZipFile(proguardJar.archivePath);
		for (ZipEntry ze : Collections.list(zf.entries())) {
			if (ze.getName().equals("com/unascribed/sup/PublicInAgent.class")) continue;
			ZipEntry copy = new ZipEntry(ze.getName());
			copy.setMethod(ze.getMethod());
			zos.putNextEntry(copy);
			if (ze.getName().endsWith(".class") && ze.getName().startsWith("com/unascribed/sup/") && ze.getName().lastIndexOf('/') == 18) {
				ClassReader cr = new ClassReader(zf.getInputStream(ze));
				ClassNode clazz = new ClassNode();
				cr.accept(clazz, 0);
				boolean amend = true;
				if (clazz.invisibleAnnotations != null) {
					Iterator<AnnotationNode> iter = clazz.invisibleAnnotations.iterator();
					while (iter.hasNext()) {
						if (iter.next().desc.equals("Lcom/unascribed/sup/PublicInAgent;")) {
							amend = false;
							iter.remove();
							break;
						}
					}
				}
				if (amend) {
					clazz.access &= ~Opcodes.ACC_PUBLIC;
					clazz.access &= ~Opcodes.ACC_PROTECTED;
					ClassWriter cw = new ClassWriter(0);
					clazz.accept(cw);
					zos.write(cw.toByteArray());
				} else {
					zf.getInputStream(ze).transferTo(zos);
				}
			} else {
				zf.getInputStream(ze).transferTo(zos);
			}
		}
		zf.close();
		zos.close();
		tmp.renameTo(proguardJar.archivePath);
	}
}

build.dependsOn amendClassPrivacy

publishing {
	repositories {
		if (project.hasProperty("publish-username")) {
			maven {
				url "https://repo-api.sleeping.town/"
				credentials {
					username project.hasProperty("publish-username") ? project.getProperty("publish-username") : null
					password project.hasProperty("publish-password") ? project.getProperty("publish-password") : null
				}
			}
		}
		maven {
			url file('build/maven').toURI().toString()
		}
	}
	publications {
		maven(MavenPublication) {
			groupId = 'com.unascribed'
			artifactId = 'unsup'
			version = project.version

			artifact shadowJar
		}
	}
}

